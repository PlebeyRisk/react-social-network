{"version":3,"sources":["components/hoc/withAuthRedirect.js","img/dialogs.svg","components/modules/direct/messages/send_message_form.jsx","components/modules/direct/messages/message.jsx","components/modules/direct/messages/messages_box.jsx","components/modules/direct/messages/header/messages_header.jsx","components/modules/direct/messages/messages.jsx","components/modules/direct/messages/empty_messages_page.jsx","components/modules/direct/messages/messages_container.jsx","components/modules/direct/dialogs/dialog.jsx","components/modules/direct/dialogs/dialogs.jsx","components/modules/direct/dialogs/dialogs_container.jsx","components/modules/direct/direct.jsx","components/modules/direct/direct_container.jsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","StyledSendMessageForm","styled","form","colors","border","light","StyledField","Field","StyledSubmit","input","attrs","type","value","secondary","disabled","reduxForm","onSubmit","handleSubmit","name","component","autoFocus","onKeyDown","e","keyCode","isSendingMessageInProgress","StyledMessage","div","StyledWrap","viewed","StyledSentMessage","StyledReceivedMessage","Message","isSentMessage","friendId","senderId","body","StyledMessagesBox","StyledMessagesWrapper","MessagesBox","messagesEndRef","useRef","messagesLength","messages","length","useEffect","current","scrollIntoView","behavior","map","message","index","addedAt","id","isSpam","recepientId","recepientName","senderName","key","ref","StyledHeader","StyledDialogName","span","StyledLastActivity","textThree","StyledUserAvatar","StyledGroup","MessagesHeader","dialogInfo","userName","photos","lastUserActivityDate","lastDialogActivityDate","Date","parse","lastUserActivityDateText","Intl","DateTimeFormat","month","day","hour","minute","format","src","small","defaultAvatar","alt","width","height","StyledMessages","Messages","undefined","isGettingMessagesInProgress","sendMessage","intervalId","StyledEmptyMessagesPage","StyledDialogsIcon","dialogsIcon","memo","cancelTokenSource","Axios","CancelToken","source","mapDispatchToProps","getMessages","startChatting","clearIntervalThunk","setIntervalThunk","compose","directSEL","getAllDialogs","getIsSendingMessageInProgress","getIsStartChattingInProgress","getIsGettingMessagesInProgress","dialogs","isStartChattingInProgress","startingIntervals","app","withRouter","Number","match","params","userId","clearGettingDataThread","cancel","token","get","filterResult","filter","dialog","getDialogInfoById","formData","trim","active","StyledNavLink","NavLink","StyledDialogAvatar","size","StyledTextWrap","StyledTextOverflow","textPrimary","StyledDialogText","StyledNewMessageCountMark","UserAvatar","photo","Dialog","isActiveV","lastDialogActivityDateText","newMessagesCount","StyledDialog","toString","StyledDialogsList","Dialogs","firstDialogRef","hasNewMessages","defaultImage","clearMessages","getIsGettingDialogsInProgress","isGettingDialogsInProgress","path","StyledDirect","main","MainContainer","Container","Direct","initialized","updateInitialized","updateDialogsInitialized","updateMessagesInitialized","getInitializedMessages","getInitializedDialogs","getInitialized","initializedMessages","initializedDialogs"],"mappings":"sNAIMA,EAA6B,SAAAC,GAAK,MAAK,CAC3CC,OAAQD,EAAME,KAAKD,SAGRE,EAAmB,SAAAC,GAAc,IACtCC,EADqC,iLAGvC,OAAKC,KAAKC,MAAMN,OAET,kBAACG,EAAcE,KAAKC,OAFI,kBAAC,IAAD,CAAUC,GAAG,eAHL,GACXC,IAAML,WAQtC,OAAOM,YAAQX,EAARW,CAAoCL,K,oBCjB7CM,EAAOC,QAAU,IAA0B,qC,q4BCK3C,IAAMC,EAAwBC,IAAOC,KAAV,IAMLC,IAAOC,OAEPD,IAAOE,OAGvBC,EAAcL,YAAOM,IAAPN,CAAH,KAaXO,EAAeP,IAAOQ,MAAMC,MAAM,CACtCC,KAAM,SACNC,MAAO,0DAFYX,CAAH,IAQPE,IAAOU,WAEE,SAAAnB,GAAK,OAAKA,EAAMoB,SAAW,OAAS,UAsBzCC,cAAU,CAAEb,KAAM,eAAlBa,EAfS,SAAArB,GAOtB,OACE,kBAACM,EAAD,CAAuBgB,SAAUtB,EAAMuB,cACrC,kBAACX,EAAD,CAAaY,KAAK,UAAUC,UAAU,WAAWC,WAAS,EAACC,UAR7C,SAAAC,GACE,KAAdA,EAAEC,SACJ7B,EAAMuB,kBAON,kBAACT,EAAD,CAAcM,SAAUpB,EAAM8B,iC,yjBCpDpC,IAAMC,EAAgBxB,IAAOyB,IAAV,KAKbC,EAAa1B,IAAOyB,IAAV,KAIM,SAAAhC,GAAK,OAAMA,EAAMkC,OAA+B,cAAtB,uBAG1CC,EAAoB5B,YAAOwB,EAAPxB,CAAH,KAKjB6B,EAAwB7B,YAAOwB,EAAPxB,CAAH,IAELE,IAAOC,OACPD,IAAOE,OAgBd0B,EAbC,SAAArC,GACd,IAAMsC,EAAgBtC,EAAMuC,WAAavC,EAAMwC,SAC/C,OACE,kBAACP,EAAD,CAAYC,OAAQlC,EAAMkC,QACvBI,EACC,kBAACH,EAAD,KAAoBnC,EAAMyC,MAE1B,kBAACL,EAAD,KAAwBpC,EAAMyC,Q,oWC7BtC,IAAMC,EAAoBnC,IAAOyB,IAAV,KAOjBW,EAAwBpC,IAAOyB,IAAV,KAiDZY,EAxCK,SAAA5C,GAClB,IAAM6C,EAAiBC,iBAAO,MACxBC,EAAoC,OAAnB/C,EAAMgD,SAAoB,EAAIhD,EAAMgD,SAASC,OASpE,GAFAC,qBALuB,WAChBH,GACLF,EAAeM,QAAQC,eAAe,CAAEC,SAAU,aAG1B,CAACrD,EAAMuC,SAAUQ,IAEpB,OAAnB/C,EAAMgD,SAAmB,OAAO,kBAAC,IAAD,MAEpC,IAAMA,EAAWhD,EAAMgD,SAASM,KAAI,SAACC,EAASC,GAAW,IAC/CC,EAAwFF,EAAxFE,QAAShB,EAA+Ec,EAA/Ed,KAAMiB,EAAyEH,EAAzEG,GAAIC,EAAqEJ,EAArEI,OAAQC,EAA6DL,EAA7DK,YAAaC,EAAgDN,EAAhDM,cAAerB,EAAiCe,EAAjCf,SAAUsB,EAAuBP,EAAvBO,WAAY5B,EAAWqB,EAAXrB,OACrF,OACE,kBAAC,EAAD,CACEuB,QAASA,EACThB,KAAMA,EACNiB,GAAIA,EACJC,OAAQA,EACRC,YAAaA,EACbC,cAAeA,EACfrB,SAAUA,EACVsB,WAAYA,EACZ5B,OAAQA,EACRK,SAAUvC,EAAMuC,SAChBwB,IAAKP,OAKX,OACE,kBAACd,EAAD,KACE,kBAACC,EAAD,KAAwBK,GACxB,yBAAKgB,IAAKnB,M,ksBClDhB,IAAMoB,EAAe1D,IAAOyB,IAAV,IAKWvB,IAAOC,QAG9BwD,EAAmB3D,IAAO4D,KAAV,KAMhBC,EAAqB7D,IAAO4D,KAAV,IACb1D,IAAO4D,WAGZC,EAAmB/D,IAAOyB,IAAV,KAOhBuC,EAAchE,IAAOyB,IAAV,KAqCFwC,EAhCQ,SAAAxE,GAAU,IAAD,EACyBA,EAAMyE,WAArDf,EADsB,EACtBA,GAAIgB,EADkB,EAClBA,SAAUC,EADQ,EACRA,OAAQC,EADA,EACAA,qBAExBC,EAAyB,IAAIC,KAAKA,KAAKC,MAAMH,IAO7CI,EANgB,IAAIC,KAAKC,eAAe,KAAM,CAClDC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,OAAQ,YAEqCC,OAAOV,GAEtD,OACE,kBAACZ,EAAD,KACE,kBAACM,EAAD,KACE,kBAAC,IAAD,CAAStE,GAAI,YAAcyD,GACzB,kBAACQ,EAAD,KAAmBQ,IAErB,kBAACN,EAAD,KAAqB,sDAAgBY,IAGvC,kBAACT,EAAD,KACE,kBAAC,IAAD,CAAStE,GAAI,YAAcyD,GACzB,kBAACY,EAAD,KACE,yBAAKkB,IAAKb,EAAOc,OAASC,IAAeC,IAAI,cAAcC,MAAM,KAAKC,OAAO,Y,qLCpDzF,IAAMC,EAAiBvF,IAAOyB,IAAV,IAKOvB,IAAOC,QAmBnBqF,EAhBE,SAAA/F,GACf,OACE,kBAAC8F,EAAD,KACG9F,EAAMyE,WAAa,kBAAC,EAAD,CAAgBA,WAAYzE,EAAMyE,kBAAiBuB,EAEvE,kBAAC,EAAD,CACEhD,SAAUhD,EAAMgD,SAChBT,SAAUvC,EAAMuC,SAChB0D,4BAA6BjG,EAAMiG,8BAGrC,kBAAC,EAAD,CAAiB3E,SAAUtB,EAAMkG,YAAapE,2BAA4B9B,EAAM8B,+B,gfCtBtF,ICOIqE,GDPEC,GAA0B7F,IAAOyB,IAAV,KAMFvB,IAAOC,OAEvBD,IAAO4D,WAGZgC,GAAoB9F,IAAOyB,IAAV,KAGHsE,MAcLC,mBATW,WACxB,OACE,kBAACH,GAAD,KACE,kBAACC,GAAD,MADF,0J,6BCbAG,GAAoBC,KAAMC,YAAYC,SAyFtCC,GAAqB,CACvBV,iBACAW,iBACAC,mBACAC,wBACAC,uBAGaC,eACb9G,aA3BoB,SAAAV,GAAU,IAE5BoH,EAKEK,KALFL,YACAM,EAIED,KAJFC,cACAC,EAGEF,KAHFE,8BACAC,EAEEH,KAFFG,6BACAC,EACEJ,KADFI,+BAEF,MAAO,CACLtE,SAAU6D,EAAYpH,GACtB8H,QAASJ,EAAc1H,GACvB+H,0BAA2BH,EAA6B5H,GACxDqC,2BAA4BsF,EAA8B3H,GAC1DwG,4BAA6BqB,EAA+B7H,GAC5DgI,kBAAmBhI,EAAMiI,IAAID,qBAe7Bb,IAEFe,IALaV,EA/FW,SAAAjH,GACxB,IAAMuC,EAAWqF,OAAO5H,EAAM6H,MAAMC,OAAOC,QAErCC,EAAyB,WAC7BxB,GAAkByB,OAAO,uCACzBjI,EAAM+G,mBAAmBZ,GATR,kBAqBnBjD,qBAAU,WACR,GAAKX,EAOL,OAhBAyF,IAEAxB,GAAoBC,KAAMC,YAAYC,SACtC3G,EAAMgH,kBAAiB,kBAAMhH,EAAM6G,YAAYtE,EAAUiE,GAAkB0B,SAAQ,IAhBlE,iBAkBjB/B,GAAanG,EAAMyH,kBAAkBU,IAlBpB,iBA6BV,WACLH,KAPAA,MASD,CAACzF,IAcJ,IAAKA,EAAU,OAAO,kBAAC,GAAD,MAEtB,IAMMkC,EANoB,SAAAf,GACxB,IAAM0E,EAAepI,EAAMuH,QAAQc,QAAO,SAAAC,GAAM,OAAIA,EAAO5E,KAAOA,KAClE,GAAK0E,EACL,OAAOA,EAAa,GAGHG,CAAkBhG,GAMrC,OAJKkC,GAAezE,EAAMwH,2BACxBxH,EAAM8G,cAAcvE,GAIpB,kBAAC,EAAD,CACES,SAAUhD,EAAMgD,SAChBkD,YA7BgB,SAAAsC,GACbA,EAASjF,SAA8C,IAAnCiF,EAASjF,QAAQkF,OAAOxF,SACjDjD,EAAMkG,YAAY3D,EAAUiG,EAASjF,YAEbvD,EAAMuH,SAAYvH,EAAMuH,UAAYvH,EAAMuH,QAAQtE,WACxBV,GAAaA,GAAYvC,EAAMuH,QAAQ,GAAG7D,KAAOnB,IAErEvC,EAAMwH,2BAClCxH,EAAM8G,cAAcvE,KAsBpBkC,WAAYA,EACZlC,SAAUA,EACVT,2BAA4B9B,EAAM8B,2BAClCmE,4BAA6BjG,EAAMiG,4BACnCuB,0BAA2BxH,EAAMwH,+B,8iDC1ErBjH,IAAOyB,IAAV,MAOO,SAAAhC,GAAK,MAAsB,SAAjBA,EAAM0I,OAAoB,2BAAwB1C,KAPlF,IAUM2C,GAAgBpI,YAAOqI,IAAPrI,CAAH,MAOG,SAAAP,GAAK,MAAsB,SAAjBA,EAAM0I,OAAoB,2BAAwB1C,KAO5E6C,GAAqBtI,IAAOyB,IAAV,MACV,SAAAhC,GAAK,OAAIA,EAAM8I,QAElB,SAAA9I,GAAK,OAAIA,EAAM8I,QACd,SAAA9I,GAAK,OAAIA,EAAM8I,QAKrBC,GAAiBxI,IAAOyB,IAAV,MAOdgH,GAAqBzI,IAAO4D,KAAV,MAMlBD,GAAmB3D,YAAOyI,GAAPzI,CAAH,KACXE,IAAOwI,aAIZC,GAAmB3I,YAAOyI,GAAPzI,CAAH,KACXE,IAAO4D,WAGZ8E,GAA4B5I,IAAO4D,KAAV,KAOT1D,IAAOU,UAClBV,IAAOE,OASZyI,GAAa,SAAApJ,GACjB,OACE,kBAAC6I,GAAD,CAAoBC,KAAM9I,EAAM8I,MAC9B,yBAAKtD,IAAKxF,EAAMqJ,MAAO1D,IAAI,cAAcC,MAAO5F,EAAM8I,KAAMjD,OAAQ7F,EAAM8I,SAmCjEQ,GA9BA,SAAAtJ,GACb,IAAMuJ,EAAYvJ,EAAMuC,WAAavC,EAAM+H,OAErClD,EAAyB,IAAIC,KAAKA,KAAKC,MAAM/E,EAAM6E,yBAKnD2E,EAJgB,IAAIvE,KAAKC,eAAe,KAAM,CAClDE,IAAK,UACLD,MAAO,UAEwCI,OAAOV,GAElD4E,EAAmBzJ,EAAMyJ,iBAAmB,GAAK,MAAQzJ,EAAMyJ,iBAG/DC,EAAef,GACrB,OACE,kBAACe,EAAD,CACEzJ,GAAI,WAAaD,EAAM+H,OACvBW,OAAQa,EAAUI,YAGlB,kBAAC,GAAD,CAAYN,MAAOrJ,EAAMqJ,MAAOP,KAAM9I,EAAM8I,MAAQ,KACpD,kBAACC,GAAD,KACE,kBAAC,GAAD,KAAmB/I,EAAM0E,UACzB,kBAACwE,GAAD,KAAmBM,IAEC,IAArBC,EAAyB,kBAACN,GAAD,KAA4BM,QAAgDzD,I,mMCzG5G,ICKIG,GDLEuD,GAAenJ,IAAOyB,IAAV,MAMZ4H,GAAoBrJ,IAAOyB,IAAV,MAqCR6H,GAnCC,SAAA7J,GACd,IAAM8J,EAAiBhH,iBAAO,MAExByE,EAAUvH,EAAMuH,QAAQjE,KAAI,SAACgF,EAAQ9E,GAAW,IAC5CE,EAAiG4E,EAAjG5E,GAAIgB,EAA6F4D,EAA7F5D,SAAUG,EAAmFyD,EAAnFzD,uBAAwBD,EAA2D0D,EAA3D1D,qBAAsBmF,EAAqCzB,EAArCyB,eAAgBN,EAAqBnB,EAArBmB,iBACpF,OACE,kBAAC,GAAD,CACE1B,OAAQrE,EACRgB,SAAUA,EACV2E,MAAOf,EAAO3D,OAAOc,OAASuE,IAC9BnF,uBAAwBA,EACxBD,qBAAsBA,EACtBmF,eAAgBA,EAChBN,iBAAkBA,EAClBlH,SAAUvC,EAAMuC,SAChBwB,IAAKP,EACLyC,4BAA6BjG,EAAMiG,iCAWzC,OACE,kBAAC,GAAD,KACE,yBAAKjC,IAAK8F,IACV,kBAACF,GAAD,KAAoBrC,KCUtBX,GAAqB,CAAEO,mBAAeJ,wBAAoBC,sBAAkBiD,oBAEjEhD,eACb9G,aAdoB,SAAAV,GAAU,IACtB0H,EAAiFD,KAAjFC,cAAe+C,EAAkEhD,KAAlEgD,8BAA+B5C,EAAmCJ,KAAnCI,+BACtD,MAAO,CACLC,QAASJ,EAAc1H,GACvB0K,2BAA4BD,EAA8BzK,GAC1DwG,4BAA6BqB,EAA+B7H,GAE5DgI,kBAAmBhI,EAAMiI,IAAID,qBAS7Bb,IAEFe,IALaV,EA3CU,SAAAjH,GACvB,IAAMuC,EAAWqF,OAAO5H,EAAM6H,MAAMC,OAAOC,QAoB3C,OARA7E,qBAAU,WAGR,OARAlD,EAAMiK,gBACNjK,EAAMgH,kBAAiB,kBAAMhH,EAAMmH,kBAAiB,IAZnC,iBAajBhB,GAAanG,EAAMyH,kBAAkBU,IAbpB,iBAmBV,WAZPnI,EAAM+G,mBAAmBZ,GAPR,oBAsBhB,CAACnG,EAAM6H,MAAMuC,OAGd,kBAAC,GAAD,CACE7C,QAASvH,EAAMuH,QACfhF,SAAUA,EACV0D,4BAA6BjG,EAAMiG,iC,yTC9BzC,IAAMoE,GAAe9J,IAAO+J,KAAV,MAOZC,GAAgBhK,YAAOiK,IAAPjK,CAAH,MAmBJkK,GAZA,SAAAzK,GACb,OAAKA,EAAM0K,YAET,kBAACL,GAAD,KACE,kBAACE,GAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,QALyB,kBAAC,IAAD,O,UC+C3B3D,GAAqB,CACzB+D,uBACAC,8BACAC,+BACA1D,mBACAN,kBAGaI,sBACb9G,aAhCsB,SAAAV,GAAU,IAAD,EAE7BqL,EAOE5D,KAPF4D,uBACAC,EAME7D,KANF6D,sBACAC,EAKE9D,KALF8D,eACA1D,EAIEJ,KAJFI,+BACA4C,EAGEhD,KAHFgD,8BACArD,EAEEK,KAFFL,YACAM,EACED,KADFC,cAEF,OAAO,EAAP,CACE8D,oBAAqBH,EAAuBrL,GAC5CyL,mBAAoBH,EAAsBtL,GAC1CiL,YAAaM,EAAevL,GAC5BwG,4BAA6BqB,EAA+B7H,GAC5D0K,2BAA4BD,EAA8BzK,GAC1DuD,SAAU6D,EAAYpH,GACtB8H,QAASJ,EAAc1H,IAPzB,oCAQuBqL,EAAuBrL,IAR9C,mCASsBsL,EAAsBtL,IAT5C,IAwBEmH,IAEFe,IACA/H,KANaqH,EA9DS,SAAAjH,GACtB,IAAMuC,EAAWvC,EAAM6H,MAAMC,OAAOC,OA2BpC,OAzBA7E,qBAAU,WACHlD,EAAMiG,6BAA4C,OAAb1D,QAAkCyD,IAAbzD,GAC7DvC,EAAM6G,YAAYtE,GAGfvC,EAAMmK,4BAA+BnK,EAAMuH,SAC9CvH,EAAMmH,kBAEP,CAAC5E,IAECvC,EAAMkL,oBAAwC,OAAlBlL,EAAMuH,cAAsCvB,IAAlBhG,EAAMuH,SAC/DvH,EAAM4K,2BAIL5K,EAAMiL,qBACL1I,IAAgC,OAAnBvC,EAAMgD,eAAwCgD,IAAnBhG,EAAMgD,WAEhDhD,EAAM6K,6BAGH7K,EAAM0K,aAAe1K,EAAMiL,qBAAuBjL,EAAMkL,oBAC3DlL,EAAM2K,oBAGD,kBAAC,GAAD,CAAQD,YAAa1K,EAAM0K","file":"static/js/7.8234c033.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst mapStateToPropsForRedirect = state => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = Component => {\r\n  class RedirectComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\r\n\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  return connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n};\r\n","module.exports = __webpack_public_path__ + \"static/media/dialogs.74d9e7cd.svg\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../../../../theme/globalStyle';\r\nimport { reduxForm, Field } from 'redux-form';\r\n\r\nconst StyledSendMessageForm = styled.form`\r\n  flex: none;\r\n  display: flex;\r\n  margin: 5px 10px 0;\r\n  padding: 10px 20px;\r\n  min-height: 50px;\r\n  border: 1px solid ${colors.border};\r\n  border-radius: 30px;\r\n  background-color: ${colors.light};\r\n`;\r\n\r\nconst StyledField = styled(Field)`\r\n  flex: 1;\r\n  border: none;\r\n  outline: 0;\r\n  min-width: 100px;\r\n  min-height: 28px;\r\n  max-height: 200px;\r\n  resize: none;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n  word-wrap: break-word;\r\n`;\r\n\r\nconst StyledSubmit = styled.input.attrs({\r\n  type: 'submit',\r\n  value: 'Отправить',\r\n})`\r\n  flex: none;\r\n  border: none;\r\n  background-color: transparent;\r\n  font-weight: 700;\r\n  color: ${colors.secondary};\r\n  cursor: pointer;\r\n  pointer-events: ${props => (props.disabled ? 'none' : 'auto')};\r\n\r\n  &:active {\r\n    opacity: 0.6;\r\n  }\r\n`;\r\n\r\nconst SendMessageForm = props => {\r\n  const onKeyDown = e => {\r\n    if (e.keyCode === 13) {\r\n      props.handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StyledSendMessageForm onSubmit={props.handleSubmit}>\r\n      <StyledField name=\"message\" component=\"textarea\" autoFocus onKeyDown={onKeyDown} />\r\n      <StyledSubmit disabled={props.isSendingMessageInProgress} />\r\n    </StyledSendMessageForm>\r\n  );\r\n};\r\n\r\nexport default reduxForm({ form: 'sendMessage' })(SendMessageForm);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../../../../theme/globalStyle';\r\n\r\nconst StyledMessage = styled.div`\r\n  padding: 10px 20px;\r\n  border-radius: 30px;\r\n`;\r\n\r\nconst StyledWrap = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-top: 10px;\r\n  background-color: ${props => (!props.viewed ? 'rgba(0,0,0, 0.02)' : 'transparent')};\r\n`;\r\n\r\nconst StyledSentMessage = styled(StyledMessage)`\r\n  align-self: flex-end;\r\n  background-color: rgba(0, 0, 0, 0.05);\r\n`;\r\n\r\nconst StyledReceivedMessage = styled(StyledMessage)`\r\n  align-self: flex-start;\r\n  border: 1px solid ${colors.border};\r\n  background-color: ${colors.light};\r\n`;\r\n\r\nconst Message = props => {\r\n  const isSentMessage = props.friendId !== props.senderId;\r\n  return (\r\n    <StyledWrap viewed={props.viewed}>\r\n      {isSentMessage ? (\r\n        <StyledSentMessage>{props.body}</StyledSentMessage>\r\n      ) : (\r\n        <StyledReceivedMessage>{props.body}</StyledReceivedMessage>\r\n      )}\r\n    </StyledWrap>\r\n  );\r\n};\r\n\r\nexport default Message;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Message from './message';\r\nimport Preloader from '../../../common/preloader';\r\n\r\nconst StyledMessagesBox = styled.div`\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst StyledMessagesWrapper = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  padding: 15px;\r\n  width: 100%;\r\n`;\r\n\r\nconst MessagesBox = props => {\r\n  const messagesEndRef = useRef(null);\r\n  const messagesLength = props.messages === null ? 0 : props.messages.length;\r\n\r\n  const scrollToBottom = () => {\r\n    if (!messagesLength) return;\r\n    messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [props.friendId, messagesLength]);\r\n\r\n  if (props.messages === null) return <Preloader />;\r\n\r\n  const messages = props.messages.map((message, index) => {\r\n    const { addedAt, body, id, isSpam, recepientId, recepientName, senderId, senderName, viewed } = message;\r\n    return (\r\n      <Message\r\n        addedAt={addedAt}\r\n        body={body}\r\n        id={id}\r\n        isSpam={isSpam}\r\n        recepientId={recepientId}\r\n        recepientName={recepientName}\r\n        senderId={senderId}\r\n        senderName={senderName}\r\n        viewed={viewed}\r\n        friendId={props.friendId}\r\n        key={index}\r\n      />\r\n    );\r\n  });\r\n\r\n  return (\r\n    <StyledMessagesBox>\r\n      <StyledMessagesWrapper>{messages}</StyledMessagesWrapper>\r\n      <div ref={messagesEndRef}></div>\r\n    </StyledMessagesBox>\r\n  );\r\n};\r\n\r\nexport default MessagesBox;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../../../../../theme/globalStyle';\r\nimport defaultAvatar from '../../../../../img/users/ava-default.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst StyledHeader = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 15px;\r\n  border-bottom: 1px solid ${colors.border};\r\n`;\r\n\r\nconst StyledDialogName = styled.span`\r\n  margin-right: 15px;\r\n  font-size: 18px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst StyledLastActivity = styled.span`\r\n  color: ${colors.textThree};\r\n`;\r\n\r\nconst StyledUserAvatar = styled.div`\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst StyledGroup = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n`;\r\n\r\nconst MessagesHeader = props => {\r\n  const { id, userName, photos, lastUserActivityDate } = props.dialogInfo;\r\n\r\n  const lastDialogActivityDate = new Date(Date.parse(lastUserActivityDate));\r\n  const dateFormatter = new Intl.DateTimeFormat('ru', {\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  });\r\n  const lastUserActivityDateText = dateFormatter.format(lastDialogActivityDate);\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <StyledGroup>\r\n        <NavLink to={'/profile/' + id}>\r\n          <StyledDialogName>{userName}</StyledDialogName>\r\n        </NavLink>\r\n        <StyledLastActivity>{'быв в сети ' + lastUserActivityDateText}</StyledLastActivity>\r\n      </StyledGroup>\r\n\r\n      <StyledGroup>\r\n        <NavLink to={'/profile/' + id}>\r\n          <StyledUserAvatar>\r\n            <img src={photos.small || defaultAvatar} alt=\"user avatar\" width=\"30\" height=\"30\" />\r\n          </StyledUserAvatar>\r\n        </NavLink>\r\n      </StyledGroup>\r\n    </StyledHeader>\r\n  );\r\n};\r\n\r\nexport default MessagesHeader;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport SendMessageForm from './send_message_form';\r\nimport MessagesBox from './messages_box';\r\nimport { colors } from '../../../../theme/globalStyle';\r\nimport Preloader from '../../../common/preloader';\r\nimport MessagesHeader from './header/messages_header';\r\n\r\nconst StyledMessages = styled.div`\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 70%;\r\n  border-left: 1px solid ${colors.border};\r\n`;\r\n\r\nconst Messages = props => {\r\n  return (\r\n    <StyledMessages>\r\n      {props.dialogInfo ? <MessagesHeader dialogInfo={props.dialogInfo} /> : undefined}\r\n\r\n      <MessagesBox\r\n        messages={props.messages}\r\n        friendId={props.friendId}\r\n        isGettingMessagesInProgress={props.isGettingMessagesInProgress}\r\n      />\r\n\r\n      <SendMessageForm onSubmit={props.sendMessage} isSendingMessageInProgress={props.isSendingMessageInProgress} />\r\n    </StyledMessages>\r\n  );\r\n};\r\n\r\nexport default Messages;\r\n","import React, { memo } from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../../../../theme/globalStyle';\r\nimport dialogsIcon from '../../../../img/dialogs.svg';\r\n\r\nconst StyledEmptyMessagesPage = styled.div`\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-left: 1px solid ${colors.border};\r\n  font-size: 16px;\r\n  color: ${colors.textThree};\r\n`;\r\n\r\nconst StyledDialogsIcon = styled.div`\r\n  width: 100px;\r\n  height: 100px;\r\n  background: url(${dialogsIcon}) center no-repeat;\r\n  background-size: cover;\r\n  opacity: 0.5;\r\n`;\r\n\r\nconst EmptyMessagesPage = () => {\r\n  return (\r\n    <StyledEmptyMessagesPage>\r\n      <StyledDialogsIcon />\r\n      Пожалуйста, выберите беседу\r\n    </StyledEmptyMessagesPage>\r\n  );\r\n};\r\n\r\nexport default memo(EmptyMessagesPage);\r\n","import React, { useEffect } from 'react';\r\nimport Messages from './messages';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { directSEL } from '../../../../redux/direct-selectors';\r\nimport { sendMessage, getMessages, startChatting } from '../../../../redux/direct-reducer';\r\nimport EmptyMessagesPage from './empty_messages_page';\r\nimport { clearIntervalThunk, setIntervalThunk } from '../../../../redux/app-reducer';\r\nimport Axios from 'axios';\r\n\r\nconst intervalName = 'messageUpdate';\r\nlet intervalId;\r\nlet cancelTokenSource = Axios.CancelToken.source();\r\n\r\nconst MessagesContainer = props => {\r\n  const friendId = Number(props.match.params.userId);\r\n\r\n  const clearGettingDataThread = () => {\r\n    cancelTokenSource.cancel('Operation canceled by dialog change');\r\n    props.clearIntervalThunk(intervalId, intervalName);\r\n  };\r\n\r\n  const startGettingDataThread = () => {\r\n    clearGettingDataThread();\r\n\r\n    cancelTokenSource = Axios.CancelToken.source();\r\n    props.setIntervalThunk(() => props.getMessages(friendId, cancelTokenSource.token), 1000, intervalName);\r\n\r\n    intervalId = props.startingIntervals.get(intervalName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!friendId) {\r\n      clearGettingDataThread();\r\n      return;\r\n    }\r\n\r\n    startGettingDataThread();\r\n\r\n    return () => {\r\n      clearGettingDataThread();\r\n    };\r\n  }, [friendId]);\r\n\r\n  const sendMessage = formData => {\r\n    if (!formData.message || formData.message.trim().length === 0) return;\r\n    props.sendMessage(friendId, formData.message);\r\n\r\n    const isDialogsEmpty = !props.dialogs || (props.dialogs && !props.dialogs.length);\r\n    const isFriendDialogsFirst = !isDialogsEmpty && (!friendId || (friendId && props.dialogs[0].id === friendId));\r\n\r\n    if (!isFriendDialogsFirst && !props.isStartChattingInProgress) {\r\n      props.startChatting(friendId);\r\n    }\r\n  };\r\n\r\n  if (!friendId) return <EmptyMessagesPage />;\r\n\r\n  const getDialogInfoById = id => {\r\n    const filterResult = props.dialogs.filter(dialog => dialog.id === id);\r\n    if (!filterResult) return undefined;\r\n    return filterResult[0];\r\n  };\r\n\r\n  const dialogInfo = getDialogInfoById(friendId);\r\n\r\n  if (!dialogInfo && !props.isStartChattingInProgress) {\r\n    props.startChatting(friendId);\r\n  }\r\n\r\n  return (\r\n    <Messages\r\n      messages={props.messages}\r\n      sendMessage={sendMessage}\r\n      dialogInfo={dialogInfo}\r\n      friendId={friendId}\r\n      isSendingMessageInProgress={props.isSendingMessageInProgress}\r\n      isGettingMessagesInProgress={props.isGettingMessagesInProgress}\r\n      isStartChattingInProgress={props.isStartChattingInProgress}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = state => {\r\n  const {\r\n    getMessages,\r\n    getAllDialogs,\r\n    getIsSendingMessageInProgress,\r\n    getIsStartChattingInProgress,\r\n    getIsGettingMessagesInProgress,\r\n  } = directSEL;\r\n  return {\r\n    messages: getMessages(state),\r\n    dialogs: getAllDialogs(state),\r\n    isStartChattingInProgress: getIsStartChattingInProgress(state),\r\n    isSendingMessageInProgress: getIsSendingMessageInProgress(state),\r\n    isGettingMessagesInProgress: getIsGettingMessagesInProgress(state),\r\n    startingIntervals: state.app.startingIntervals,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = {\r\n  sendMessage,\r\n  getMessages,\r\n  startChatting,\r\n  clearIntervalThunk,\r\n  setIntervalThunk,\r\n};\r\n\r\nexport default compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n  ),\r\n  withRouter,\r\n)(MessagesContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { colors } from '../../../../theme/globalStyle';\r\n\r\nconst StyledDiv = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 10px;\r\n  width: 100%;\r\n  text-decoration: none;\r\n  background-color: ${props => (props.active === 'true' ? 'rgba(0, 0, 0, 0.07)' : undefined)};\r\n`;\r\n\r\nconst StyledNavLink = styled(NavLink)`\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px 10px;\r\n  width: 100%;\r\n  text-decoration: none;\r\n  background-color: ${props => (props.active === 'true' ? 'rgba(0, 0, 0, 0.07)' : undefined)};\r\n\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.03);\r\n  }\r\n`;\r\n\r\nconst StyledDialogAvatar = styled.div`\r\n  flex: 0 0 ${props => props.size}px;\r\n  margin-right: 10px;\r\n  width: ${props => props.size}px;\r\n  height: ${props => props.size}px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst StyledTextWrap = styled.div`\r\n  flex: 1 1 auto;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst StyledTextOverflow = styled.span`\r\n  overflow: hidden;\r\n  white-space: nowrap;\r\n  text-overflow: ellipsis;\r\n`;\r\n\r\nconst StyledDialogName = styled(StyledTextOverflow)`\r\n  color: ${colors.textPrimary};\r\n  font-weight: 600;\r\n`;\r\n\r\nconst StyledDialogText = styled(StyledTextOverflow)`\r\n  color: ${colors.textThree};\r\n`;\r\n\r\nconst StyledNewMessageCountMark = styled.span`\r\n  position: absolute;\r\n  bottom: 6px;\r\n  right: 18px;\r\n  width: 28px;\r\n  height: 18px;\r\n  border-radius: 45%;\r\n  background-color: ${colors.secondary};\r\n  color: ${colors.light};\r\n  font-size: 10px;\r\n  line-height: 18px;\r\n  font-weight: 600;\r\n  text-align: center;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst UserAvatar = props => {\r\n  return (\r\n    <StyledDialogAvatar size={props.size}>\r\n      <img src={props.photo} alt=\"user avatar\" width={props.size} height={props.size} />\r\n    </StyledDialogAvatar>\r\n  );\r\n};\r\n\r\nconst Dialog = props => {\r\n  const isActiveV = props.friendId === props.userId;\r\n\r\n  const lastDialogActivityDate = new Date(Date.parse(props.lastDialogActivityDate));\r\n  const dateFormatter = new Intl.DateTimeFormat('ru', {\r\n    day: 'numeric',\r\n    month: 'short',\r\n  });\r\n  const lastDialogActivityDateText = dateFormatter.format(lastDialogActivityDate);\r\n\r\n  const newMessagesCount = props.newMessagesCount > 99 ? '99+' : props.newMessagesCount;\r\n\r\n  // const StyledDialog = props.isGettingMessagesInProgress ? StyledDiv : StyledNavLink;\r\n  const StyledDialog = StyledNavLink;\r\n  return (\r\n    <StyledDialog\r\n      to={`/direct/` + props.userId}\r\n      active={isActiveV.toString()}\r\n      // disabled={props.isGettingMessagesInProgress}\r\n    >\r\n      <UserAvatar photo={props.photo} size={props.size || 50} />\r\n      <StyledTextWrap>\r\n        <StyledDialogName>{props.userName}</StyledDialogName>\r\n        <StyledDialogText>{lastDialogActivityDateText}</StyledDialogText>\r\n      </StyledTextWrap>\r\n      {newMessagesCount !== 0 ? <StyledNewMessageCountMark>{newMessagesCount}</StyledNewMessageCountMark> : undefined}\r\n    </StyledDialog>\r\n  );\r\n};\r\n\r\nexport default Dialog;\r\n","import React, { useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Dialog from './dialog';\r\nimport defaultImage from '../../../../img/users/ava-default.jpg';\r\n\r\nconst StyledDialog = styled.div`\r\n  flex: none;\r\n  width: 30%;\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst StyledDialogsList = styled.div``;\r\n\r\nconst Dialogs = props => {\r\n  const firstDialogRef = useRef(null);\r\n\r\n  const dialogs = props.dialogs.map((dialog, index) => {\r\n    const { id, userName, lastDialogActivityDate, lastUserActivityDate, hasNewMessages, newMessagesCount } = dialog;\r\n    return (\r\n      <Dialog\r\n        userId={id}\r\n        userName={userName}\r\n        photo={dialog.photos.small || defaultImage}\r\n        lastDialogActivityDate={lastDialogActivityDate}\r\n        lastUserActivityDate={lastUserActivityDate}\r\n        hasNewMessages={hasNewMessages}\r\n        newMessagesCount={newMessagesCount}\r\n        friendId={props.friendId}\r\n        key={index}\r\n        isGettingMessagesInProgress={props.isGettingMessagesInProgress}\r\n      />\r\n    );\r\n  });\r\n\r\n  const scrollToTop = () => {\r\n    firstDialogRef.current.scrollIntoView({ behavior: 'smooth' });\r\n  };\r\n\r\n  // useEffect(scrollToTop, [props.]);\r\n\r\n  return (\r\n    <StyledDialog>\r\n      <div ref={firstDialogRef}></div>\r\n      <StyledDialogsList>{dialogs}</StyledDialogsList>\r\n    </StyledDialog>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React, { useEffect } from 'react';\r\nimport Dialogs from './dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\nimport { directSEL } from '../../../../redux/direct-selectors';\r\nimport { getAllDialogs, clearMessages } from '../../../../redux/direct-reducer';\r\nimport { clearIntervalThunk, setIntervalThunk } from '../../../../redux/app-reducer';\r\n\r\nconst intervalName = 'dialogsUpdate';\r\nlet intervalId;\r\n\r\nconst DialogsContainer = props => {\r\n  const friendId = Number(props.match.params.userId);\r\n\r\n  const clearGettingDataThread = () => {\r\n    props.clearIntervalThunk(intervalId, intervalName);\r\n  };\r\n\r\n  const startGettingDataThread = () => {\r\n    props.clearMessages();\r\n    props.setIntervalThunk(() => props.getAllDialogs(), 1000, intervalName);\r\n    intervalId = props.startingIntervals.get(intervalName);\r\n  };\r\n\r\n  useEffect(() => {\r\n    startGettingDataThread();\r\n\r\n    return () => {\r\n      clearGettingDataThread();\r\n    };\r\n  }, [props.match.path]);\r\n\r\n  return (\r\n    <Dialogs\r\n      dialogs={props.dialogs}\r\n      friendId={friendId}\r\n      isGettingMessagesInProgress={props.isGettingMessagesInProgress}\r\n    />\r\n  );\r\n};\r\n\r\nlet mapStateToProps = state => {\r\n  const { getAllDialogs, getIsGettingDialogsInProgress, getIsGettingMessagesInProgress } = directSEL;\r\n  return {\r\n    dialogs: getAllDialogs(state),\r\n    isGettingDialogsInProgress: getIsGettingDialogsInProgress(state),\r\n    isGettingMessagesInProgress: getIsGettingMessagesInProgress(state),\r\n\r\n    startingIntervals: state.app.startingIntervals,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = { getAllDialogs, clearIntervalThunk, setIntervalThunk, clearMessages };\r\n\r\nexport default compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n  ),\r\n  withRouter,\r\n)(DialogsContainer);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Container from '../../common/container';\r\nimport MessagesContainer from './messages/messages_container';\r\nimport DialogsContainer from './dialogs/dialogs_container';\r\nimport Preloader from '../../common/preloader';\r\n\r\nconst StyledDirect = styled.main`\r\n  padding: 0;\r\n  flex: 1 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst MainContainer = styled(Container)`\r\n  flex: 1 0 auto;\r\n  display: flex;\r\n  padding: 138px 20px 20px;\r\n  max-height: 100vh;\r\n`;\r\n\r\nconst Direct = props => {\r\n  if (!props.initialized) return <Preloader />;\r\n  return (\r\n    <StyledDirect>\r\n      <MainContainer>\r\n        <DialogsContainer />\r\n        <MessagesContainer />\r\n      </MainContainer>\r\n    </StyledDirect>\r\n  );\r\n};\r\n\r\nexport default Direct;\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Direct from './direct';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\nimport { directSEL } from '../../../redux/direct-selectors';\r\nimport {\r\n  updateInitialized,\r\n  getAllDialogs,\r\n  getMessages,\r\n  updateDialogsInitialized,\r\n  updateMessagesInitialized,\r\n} from '../../../redux/direct-reducer';\r\n\r\nconst DirectContainer = props => {\r\n  const friendId = props.match.params.userId;\r\n\r\n  useEffect(() => {\r\n    if (!props.isGettingMessagesInProgress && friendId !== null && friendId !== undefined) {\r\n      props.getMessages(friendId);\r\n    }\r\n\r\n    if (!props.isGettingDialogsInProgress && !props.dialogs) {\r\n      props.getAllDialogs();\r\n    }\r\n  }, [friendId]);\r\n\r\n  if (!props.initializedDialogs && props.dialogs !== null && props.dialogs !== undefined) {\r\n    props.updateDialogsInitialized();\r\n  }\r\n\r\n  if (\r\n    !props.initializedMessages &&\r\n    (!friendId || (props.messages !== null && props.messages !== undefined))\r\n  ) {\r\n    props.updateMessagesInitialized();\r\n  }\r\n\r\n  if (!props.initialized && props.initializedMessages && props.initializedDialogs) {\r\n    props.updateInitialized();\r\n  }\r\n\r\n  return <Direct initialized={props.initialized} />;\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  const {\r\n    getInitializedMessages,\r\n    getInitializedDialogs,\r\n    getInitialized,\r\n    getIsGettingMessagesInProgress,\r\n    getIsGettingDialogsInProgress,\r\n    getMessages,\r\n    getAllDialogs,\r\n  } = directSEL;\r\n  return {\r\n    initializedMessages: getInitializedMessages(state),\r\n    initializedDialogs: getInitializedDialogs(state),\r\n    initialized: getInitialized(state),\r\n    isGettingMessagesInProgress: getIsGettingMessagesInProgress(state),\r\n    isGettingDialogsInProgress: getIsGettingDialogsInProgress(state),\r\n    messages: getMessages(state),\r\n    dialogs: getAllDialogs(state),\r\n    initializedMessages: getInitializedMessages(state),\r\n    initializedDialogs: getInitializedDialogs(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  updateInitialized,\r\n  updateDialogsInitialized,\r\n  updateMessagesInitialized,\r\n  getAllDialogs,\r\n  getMessages,\r\n};\r\n\r\nexport default compose(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n  ),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(DirectContainer);\r\n"],"sourceRoot":""}