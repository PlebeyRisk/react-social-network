{"version":3,"sources":["img/validation-error.svg","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/common/input.jsx","components/common/checkbox.jsx","components/common/captcha.jsx","utils/validators/validators.js","components/modules/login/login_form/login_form.jsx","components/modules/login/login.jsx","components/modules/login/login_container.jsx"],"names":["module","exports","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","StyledInput","styled","input","props","hasError","colors","errorBorder","border","light","StyledBox","div","error","active","errorShadow","errorIcon","Input","meta","visited","submitFailed","StyledCheckBox","StyledLabelMark","label","gray","checked","secondary","StyledLabelText","textTwo","Checkbox","id","Math","random","toString","replace","type","hidden","onMouseDown","onFocus","onMouseUp","onBlur","htmlFor","placeholder","StyledCaptcha","captcha","isFetchingCaptchaInProgress","StyledText","span","textThree","Captcha","onClick","getCaptcha","undefined","required","value","maxLength","max","String","StyledForm","form","StyledFieldGroup","StyledRememberMeGroup","StyledButton","button","maxLength6","maxLength30","reduxForm","onSubmit","handleSubmit","autoComplete","noValidate","Field","name","component","validate","StyledLogin","main","MainContainer","Container","Login","LoginContainer","login","formData","email","password","rememberMe","this","isFetching","isAuth","to","React","Component","connect","state","userId","auth"],"mappings":"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","file":"static/js/6.c8d371e2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/validation-error.71832570.svg\";","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../../theme/globalStyle';\r\nimport errorIcon from '../../img/validation-error.svg';\r\n\r\nconst StyledInput = styled.input`\r\n  padding: 9px;\r\n  padding-right: 30px;\r\n  border-radius: 4px;\r\n  border: 1px solid ${props => (props.hasError ? colors.errorBorder : colors.border)};\r\n  background-color: ${colors.light};\r\n`;\r\n\r\nconst StyledBox = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n  text-align: center;\r\n  border-radius: 4px;\r\n\r\n  &::before {\r\n    content: '${props => props.error}';\r\n    display: ${props => (props.error ? 'block' : 'none')};\r\n    position: absolute;\r\n    padding: 5px 10px;\r\n    top: 50%;\r\n    left: ${props => (props.active ? '-20px' : '-9999px')};\r\n    opacity: ${props => (props.active ? '1' : '0')};\r\n    width: 200px;\r\n    transform: translate(-100%, -50%);\r\n    border-radius: 2px;\r\n    background-color: ${colors.error};\r\n    box-shadow: 0 0 0 1px ${colors.errorShadow}, 0 1px 10px rgba(0, 0, 0, .35);\r\n    color: ${colors.light};\r\n    transition: opacity 0.3s ease-in-out;\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    display: ${props => (props.hasError ? 'block' : 'none')};\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 10px;\r\n    width: 20px;\r\n    height: 20px;\r\n    transform: translateY(-50%);\r\n    background: url(${errorIcon}) center no-repeat;\r\n    background-size: cover;\r\n  }\r\n`;\r\n\r\nconst Input = ({ meta, input, ...props }) => {\r\n  const { error, active, visited, submitFailed } = meta;\r\n  const hasError = error && !active && (visited || submitFailed);\r\n  return (\r\n    <StyledBox error={error} active={active} hasError={hasError}>\r\n      <StyledInput {...props} {...input} hasError={hasError} />\r\n    </StyledBox>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../../theme/globalStyle';\r\n\r\nconst StyledCheckBox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  user-select: none;\r\n`;\r\n\r\nconst StyledLabelMark = styled.label`\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 4px;\r\n  border: 1px solid ${colors.border};\r\n  background-color: ${colors.gray};\r\n  text-align: center;\r\n\r\n  &::before {\r\n    content: '✔';\r\n    display: ${props => (props.checked ? 'inline' : 'none')};\r\n    line-height: 20px;\r\n    color: ${colors.secondary};\r\n  }\r\n`;\r\n\r\nconst StyledLabelText = styled.label`\r\n  margin-left: 5px;\r\n  background-color: transparent;\r\n  text-align: left;\r\n  color: ${colors.textTwo};\r\n`;\r\n\r\nconst Checkbox = props => {\r\n  const id = `toggle_${Math.random()\r\n    .toString()\r\n    .replace(/0\\./, '')}`;\r\n\r\n  return (\r\n    <StyledCheckBox>\r\n      <input {...props.input} id={id} type=\"checkbox\" hidden />\r\n      <StyledLabelMark\r\n        onMouseDown={props.input.onFocus}\r\n        onMouseUp={props.input.onBlur}\r\n        htmlFor={id}\r\n        checked={props.input.checked}\r\n      />\r\n      <StyledLabelText\r\n        onMouseDown={props.input.onFocus}\r\n        onMouseUp={props.input.onBlur}\r\n        htmlFor={id}\r\n      >\r\n        {props.placeholder}\r\n      </StyledLabelText>\r\n    </StyledCheckBox>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from '../../theme/globalStyle';\r\nimport Preloader from './preloader';\r\n\r\nconst StyledCaptcha = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  width: 200px;\r\n  height: 100px;\r\n  margin: 10px 0 20px;\r\n  display: flex;\r\n  background: ${colors.gray} url(${props => props.captcha}) center no-repeat;\r\n  background-size: cover;\r\n  cursor: pointer;\r\n  pointer-events: ${props => (!props.isFetchingCaptchaInProgress ? 'auto' : 'none')};\r\n  user-select: none;\r\n`;\r\n\r\nconst StyledText = styled.span`\r\n  color: ${colors.textThree};\r\n  font-size: 20px;\r\n`;\r\n\r\nconst Captcha = props => {\r\n  return (\r\n    <StyledCaptcha\r\n      captcha={props.captcha}\r\n      onClick={props.getCaptcha}\r\n      isFetchingCaptchaInProgress={props.isFetchingCaptchaInProgress}\r\n    >\r\n      {!props.captcha && !props.isFetchingCaptchaInProgress ? (\r\n        <StyledText>click me</StyledText>\r\n      ) : (\r\n        undefined\r\n      )}\r\n      {props.isFetchingCaptchaInProgress ? <Preloader /> : undefined}\r\n    </StyledCaptcha>\r\n  );\r\n};\r\n\r\nexport default Captcha;\r\n","export const required = value => {\r\n  if (value) return undefined;\r\n\r\n  return \"Это поле обязательно для заполнения!\";\r\n}\r\n\r\nexport const maxLength = (max) => {\r\n  return (value) => {\r\n    if (String(value).length > max) return `Максимальное количество ${max} символов`;\r\n\r\n    return undefined;\r\n  };\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { colors } from '../../../../theme/globalStyle';\r\nimport Input from '../../../common/input';\r\nimport Checkbox from '../../../common/checkbox';\r\nimport Captcha from '../../../common/captcha';\r\nimport { required, maxLength } from '../../../../utils/validators/validators';\r\n\r\nconst StyledForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  width: 270px;\r\n`;\r\n\r\nconst StyledInput = styled(Input)`\r\n  background-color: ${colors.gray};\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledFieldGroup = styled.div`\r\n  margin-bottom: 6px;\r\n  width: 100%;\r\n`;\r\n\r\nconst StyledRememberMeGroup = styled.div`\r\n  align-self: flex-start;\r\n  padding: 4px 0 10px;\r\n`;\r\n\r\nconst StyledButton = styled.button`\r\n  margin-top: 15px;\r\n  padding: 10px;\r\n  width: 100%;\r\n  border: none;\r\n  border-radius: 4px;\r\n  background-color: ${colors.secondary};\r\n  font-weight: 600;\r\n  color: ${colors.light};\r\n`;\r\n\r\nconst maxLength6 = maxLength(6);\r\nconst maxLength30 = maxLength(30);\r\n\r\nconst LoginForm = props => {\r\n  return (\r\n    <StyledForm onSubmit={props.handleSubmit} autoComplete=\"true\" noValidate>\r\n      <StyledFieldGroup>\r\n        <Field\r\n          name=\"email\"\r\n          component={StyledInput}\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          validate={[required, maxLength30]}\r\n        />\r\n      </StyledFieldGroup>\r\n      <StyledFieldGroup>\r\n        <Field\r\n          name=\"password\"\r\n          component={StyledInput}\r\n          type=\"password\"\r\n          placeholder=\"Пароль\"\r\n          validate={[required, maxLength30]}\r\n        />\r\n      </StyledFieldGroup>\r\n      <StyledRememberMeGroup>\r\n        <Field\r\n          name=\"rememberMe\"\r\n          component={Checkbox}\r\n          type=\"checkbox\"\r\n          placeholder=\"Запомнить меня\"\r\n        />\r\n      </StyledRememberMeGroup>\r\n\r\n      {props.captcha ? (\r\n        <>\r\n          <Captcha\r\n            captcha={props.captcha}\r\n            getCaptcha={props.getCaptcha}\r\n            isFetchingCaptchaInProgress={props.isFetchingCaptchaInProgress}\r\n          />\r\n          <Field\r\n            name=\"captcha\"\r\n            component={StyledInput}\r\n            type=\"text\"\r\n            placeholder=\"Каптча\"\r\n            validate={props.captcha ? [required, maxLength6] : [maxLength6]}\r\n          />\r\n        </>\r\n      ) : (\r\n        undefined\r\n      )}\r\n      <StyledButton type=\"submit\">Войти</StyledButton>\r\n    </StyledForm>\r\n  );\r\n};\r\nexport default reduxForm({ form: 'login' })(LoginForm);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Container from '../../common/container';\r\nimport { colors } from '../../../theme/globalStyle';\r\nimport logoTextIcon from '../../../img/logo-text.svg';\r\nimport LoginForm from './login_form/login_form';\r\n\r\nconst StyledLogin = styled.main``;\r\n\r\nconst MainContainer = styled(Container)`\r\n  padding: 20px 0;\r\n`;\r\n\r\nconst StyledBox = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin: 0 auto;\r\n  padding: 40px 0;\r\n  width: 350px;\r\n  border: 1px solid ${colors.border};\r\n  background-color: ${colors.light};\r\n`;\r\n\r\nconst StyledLogoText = styled.div`\r\n  margin-bottom: 12px;\r\n  width: 175px;\r\n`;\r\n\r\nconst Login = props => {\r\n  return (\r\n    <StyledLogin>\r\n      <MainContainer>\r\n        <StyledBox>\r\n          {/* <StyledLogoText>\r\n            <img src={logoTextIcon} alt=\"logo text\" width=\"175\" />\r\n          </StyledLogoText> */}\r\n          <LoginForm {...props} />\r\n        </StyledBox>\r\n      </MainContainer>\r\n    </StyledLogin>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Login from './login';\r\nimport { login, getCaptcha } from '../../../redux/auth-reducer';\r\nimport Preloader from '../../common/preloader';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nclass LoginContainer extends React.Component {\r\n  login = formData => {\r\n    const { email, password, rememberMe, captcha } = formData;\r\n    this.props.login(email, password, rememberMe, captcha);\r\n  };\r\n\r\n  componentDidMount() {}\r\n\r\n  componentDidUpdate() {}\r\n\r\n  render() {\r\n    if (this.props.isFetching) return <Preloader />;\r\n    return this.props.isAuth ? <Redirect to=\"/\" /> : <Login {...this.props} onSubmit={this.login} />;\r\n  }\r\n}\r\n\r\nlet mapStateToProps = state => {\r\n  return {\r\n    userId: state.auth.userId,\r\n    email: state.auth.email,\r\n    login: state.auth.login,\r\n    isFetching: state.auth.isFetching,\r\n    isAuth: state.auth.isAuth,\r\n    captcha: state.auth.captcha,\r\n    isFetchingCaptchaInProgress: state.auth.isFetchingCaptchaInProgress,\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { login, getCaptcha },\r\n)(LoginContainer);\r\n"],"sourceRoot":""}